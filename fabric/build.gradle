plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modRuntimeOnly "maven.modrinth:sodium:mc1.18.2-0.4.1"
    modRuntimeOnly "maven.modrinth:iris:1.18.x-v1.3.1"
    //modRuntimeOnly "maven.modrinth:indium:1.0.7+mc1.18.2"
    //modRuntimeOnly "maven.modrinth:create-fabric:1.18.2-0.5.0d-728"
    modRuntimeOnly "maven.modrinth:roughly-enough-items:8.3.529+fabric"


//    modRuntimeOnly("io.github.fabricators_of_create:Porting-Lib:1.2.460-beta+1.18.2-dev.cca931b") //temp create
//    modRuntimeOnly("me.alphamode:ForgeTags:2.1") //temp create
//    modRuntimeOnly("com.electronwill.night-config:core:3.6.3") //temp create
//    modRuntimeOnly("com.electronwill.night-config:toml:3.6.3") //temp create
//    modRuntimeOnly("curse.maven:forge-config-api-port-fabric-547434:3671141") //temp create
//    modRuntimeOnly("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.4") //temp create
//    modRuntimeOnly("com.jozufozu.flywheel:flywheel-fabric-1.18.2:0.6.4-30") //temp create
//    modRuntimeOnly("com.jamieswhiteshirt:reach-entity-attributes:2.1.1") //temp create
//    modRuntimeOnly("dev.cafeteria:fake-player-api:0.3.0") //temp create
//    modRuntimeOnly("io.github.tropheusj:milk-lib:0.3.2") //temp create
//    modRuntimeOnly("me.luligabi:NoIndium:1.0.1+1.18.2") //temp create
//    runtimeOnly("com.google.code.findbugs:jsr305:3.0.2") //temp create
//    modRuntimeOnly("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
//    modRuntimeOnly("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }

//    modRuntimeOnly("com.github.qouteall:GravityChanger:v0.3.1") { transitive = false } //temp immersiveportals
//    modApi("com.github.Virtuoel:Pehkui:3.3.3", { exclude group: "net.fabricmc.fabric-api" }) //temp immersiveportals
//    modRuntimeOnly ('com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:v1.4.9-1.18'){ //temp immersiveportals
//        exclude(group: "net.fabricmc.fabric-api")
//        transitive(false)
//    }
//    modRuntimeOnly ('com.github.qouteall.ImmersivePortalsMod:q_misc_util:v1.4.9-1.18'){ //temp immersiveportals
//        exclude(group: "net.fabricmc.fabric-api")
//        transitive(false)
//    }


    // needed for resource loading
    include(modImplementation(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version)))

//    include("org.lwjgl:lwjgl-ovr:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl-opengl:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl-jemalloc:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl-glfw:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl-stb:3.2.2:natives-windows")
//    include("org.lwjgl:lwjgl-openal:3.2.2:natives-windows")

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

remapJar {
    archiveClassifier.set('fabric')
}

jar {
    classifier "dev"
    manifest {
        attributes(
                'Main-Class': "org.vivecraft.LaunchPopup"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
